var assert_counter = require("assert_counter.ltn")
var assert = assert_counter.assert
var assert_not = assert_counter.assert_not
{
    var test1 = try(eval, ["
        const ONE = 1
        ONE = 2
        return ONE
    "])
    assert(test1:get_error():contains("System.Exception: Compilation Error!"), true, "Failed consts Test 1.")

    var test2 = try(eval, ["
        const ONE = 1
        function change_const()
        {
            ONE = 2
        }
        change_const()
    "])
    assert(test2:get_error():contains("System.Exception: Compilation Error!"), true, "Failed consts Test 2.")

    var test3 = try(eval, [#
        const hello_world = ["hello", "world"]
        function change_const(aList)
        {
            aList = ["not", "cool"]
        }
        change_const(hello_world)
    #])
    write_line(test3)
    assert(test3:get_error():contains("System.Exception: Compilation Error!"), true, "Failed consts Test 3.")

//

// Function declarations should be const


    var test4 = try(eval, ["
        function ONE_FUNC ()
        {
            return 1
        }

        function TWO_FUNC ()
        {
            return 2
        }
        ONE_FUNC = TWO_FUNC
    "])
    assert(test4:get_error():contains("System.Exception: Compilation Error!"), true, "Failed consts Test 4.")

// // Function expressions should be var by defauld, optionally const
    {
        var one_func = function ()
        {
            return 1
        }

        var two_func = function ()
        {
            return 2
        }
        one_func = two_func
        assert(one_func(), 2, "Failed consts Test 5.")
    }

    var test6 = try(eval, ["
        const one_func = function ()
        {
            return 1
        }

        const two_func = function ()
        {
            return 2
        }
        one_func = two_func
    "])
    assert(test6:get_error():contains("System.Exception: Compilation Error!"), true, "Failed consts Test 6.")
}
return assert_counter.get_error_counter()