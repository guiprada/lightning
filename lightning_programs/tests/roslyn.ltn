var assert_counter = require("assert_counter.ltn")
var assert = assert_counter.assert
var assert_not = assert_counter.assert_not
{
    if(roslyn.enabled)
    {
        // Testing csharp module
        var csharp_sum =
        #
            // return (System.Int32)(5 + 6);
            5 + 6
        #
        {
            var result = roslyn.csharp_eval(csharp_sum):unwrap()
            assert(result, 11, "Failed roslyn.csharp_eval test 1. ")
        }

        var csharp_char =
        #
            // char a = 'a';
            // a
            'a'
        #
        {
            var result = roslyn.csharp_eval(csharp_char):unwrap()
            assert(result, 'a', "Failed roslyn.csharp_eval test 2. ")
        }

        var csharp_string =
        #
            // System.String aa = "aa";
            // aa
            "aa"
        #
        {
            var result = roslyn.csharp_eval(csharp_string):unwrap()
            assert(result, "aa", "Failed roslyn.csharp_eval test 3. ")
        }

        var csharp_bool =
        #
            true
        #
        {
            var result = roslyn.csharp_eval(csharp_bool):unwrap()
            assert(result, true, "Failed roslyn.csharp_eval test 4. ")
        }

        var csharp_null =
        #
            null
        #
        {
            var result = roslyn.csharp_eval(csharp_null)
            assert(!result:ok(), true, "Failed roslyn.csharp_eval test 5. ")
        }

        var csharp_unknown =
        #
            (System.Int128)1
        #
        {
            var result = roslyn.csharp_eval(csharp_unknown)
            assert(result:ok(), true, "Failed roslyn.csharp_eval test 6. ")
            assert_not(result:unwrap(), 1, "Failed roslyn.csharp_eval test 7. ") // it is a wraper unit
        }

        var csharp_sum_func_code =
        #
            using System;
            using Float = System.Double;
            using lightningUnit;

            (vm) => {
                Float opA = vm.GetNumber(0);
                Float opB = vm.GetNumber(1);

                return new Unit(opA + opB);
            }
        #
        {
            var csharp_sum_func = roslyn.csharpscript_compile("csharp_sum_func", 2, csharp_sum_func_code)
            assert(csharp_sum_func(5, 6), 11.0, "Failed roslyn.ncsharpscript_compile test 1.")
        }

        var csharp_native_sum_func_code =
        #
        using System;
        using System.IO;

        namespace RoslynCore
        {
            public static class Helper
            {
                public static long ExFuncTest(long i)
                {
                    return i + 1;
                }
            }
        }
        #{
            var csharp_native_sum_func = roslyn.compile("ExFuncTest", 1, csharp_native_sum_func_code)
            assert(csharp_native_sum_func(2):unwrap(), 3, "Failed roslyn.compile test 1.")
            assert(try(csharp_native_sum_func, [2]), true, "Failed roslyn.ncompile test 2.")
        }

        var asm_paths = roslyn.get_available_assemblies()
        var references = roslyn.get_references_from_assemblies_list(asm_paths)
    }
}
return assert_counter.get_error_counter()