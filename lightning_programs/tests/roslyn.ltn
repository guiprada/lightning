var assert_counter = require("assert_counter.ltn")
var assert = assert_counter.assert
var assert_not = assert_counter.assert_not
{
    // Testing csharp module
    var csharp_sum =
    #
        // return (System.Int32)(5 + 6);
        5 + 6
    #
    if (roslyn.csharp_eval != null){
        // var result = roslyn.csharp_eval(csharp_sum)
        // assert(result, 11, "Failed roslyn.csharp_eval test 1. ")
    }

    var csharp_char =
    #
        // char a = 'a';
        // a
        'a'
    #
    if (roslyn.csharp_eval != null){
        var result = roslyn.csharp_eval(csharp_char)
        assert(result, 'a', "Failed roslyn.csharp_eval test 2. ")
    }

    var csharp_string =
    #
        // System.String aa = "aa";
        // aa
        "aa"
    #
    if (roslyn.csharp_eval != null){
        var result = roslyn.csharp_eval(csharp_string)
        assert(result, "aa", "Failed roslyn.csharp_eval test 3. ")
    }

    var csharp_bool =
    #
        true
    #
    if (roslyn.csharp_eval != null){
        var result = roslyn.csharp_eval(csharp_bool)
        assert(result, true, "Failed roslyn.csharp_eval test 4. ")
    }

    var csharp_null =
    #
        null
    #
    if (roslyn.csharp_eval != null){
        var result = roslyn.csharp_eval(csharp_null)
        assert(result, null, "Failed roslyn.csharp_eval test 5. ")
    }

    var csharp_unknown =
    #
        (System.Int128)1
    #
    if (roslyn.csharp_eval != null){
        var result = roslyn.csharp_eval(csharp_unknown)
        assert_not(result, null, "Failed roslyn.csharp_eval test 6. ")
        assert_not(result, 1, "Failed roslyn.csharp_eval test 7. ")
    }

    var csharp_sum_func_code =
    #
        using System;
        using Number = System.Double;
        using lightning;

        (vm) => {
            Number opA = vm.GetNumber(0);
            Number opB = vm.GetNumber(1);

            return new Unit(opA + opB);
        }
    #
    if (roslyn.csharpscript_compile != null)
    {
        var csharp_sum_func = roslyn.csharpscript_compile("csharp_sum_func", 2, csharp_sum_func_code)
        assert(csharp_sum_func(5, 6), 11, "Failed roslyn.ncsharpscript_compile test 1.")
    }

    var csharp_native_sum_func_code =
    #
    using System;
    using System.IO;
    using lightning;

    namespace RoslynCore
    {
        public static class Helper
        {
            public static long ExFuncTest(long i)
            {
                return i + 1;
            }
        }
    }
    #
    if (roslyn.compile != null){
        var csharp_native_sum_func = roslyn.compile("ExFuncTest", 1, csharp_native_sum_func_code)
        assert(csharp_native_sum_func(2), 3, "Failed roslyn.compile test 1.")
        assert(try(csharp_native_sum_func, [2]), true, "Failed roslyn.ncompile test 2.")
    }

    var asm_paths = roslyn.get_available_assemblies()
    write_line(asm_paths)
    write_line(roslyn.get_references_from_assemblies_list(asm_paths))
}
return assert_counter.get_error_counter()