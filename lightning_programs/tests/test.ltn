write_line("*** Welcome to lightning test suite Zzz :) ***")

var os_string = get_os()
var os = "Unknown"
if(os_string:contains("Windows"))
    os = "Windows"
else if(os_string:contains("Unix"))
    os = "Unix"

write_line(get_os())

if (intrinsic.create == null){
    write_line("No inline intrinsic support!")
}

write_line("-- Starting tests --")
var start_time = time.now()

// Let's use some modules
var _assert = require("assert.ltn")
var lib_assert_counter = require("assert_counter.ltn")

var count_errors = lib_assert_counter.get_error_counter
var clear_errors = lib_assert_counter.reset_error_counter

var errors = 0
errors += require("tests/assert.ltn")
errors += require("tests/numbers.ltn")
errors += require("tests/strings.ltn")
errors += require("tests/pmap.ltn")
errors += require("tests/rmap.ltn")
errors += require("tests/map.ltn")
errors += require("tests/reduce.ltn")
errors += require("tests/table.ltn")
errors += require("tests/scoping.ltn")
errors += require("tests/closures.ltn")
errors += require("tests/lambdas.ltn")
errors += require("tests/boolean.ltn")
errors += require("tests/iterators.ltn")
errors += require("tests/methods.ltn")
errors += require("tests/compound_calls.ltn")
errors += require("tests/transient.ltn")
errors += require("tests/math.ltn")
errors += require("tests/eval.ltn")
errors += require("tests/maybe.ltn")
errors += require("tests/assign_op.ltn")
errors += require("tests/lock.ltn")
errors += require("tests/vm_management.ltn")
errors += require("tests/inline_intrinsics.ltn")
errors += require("tests/nuples.ltn")
errors += require("tests/super_table.ltn")
errors += require("tests/char.ltn")
errors += require("tests/integers.ltn")
errors += require("tests/anonymous_call.ltn")
errors += require("tests/try.ltn")

//////////////////////////////// scratch
{
    var f1
    var f2
    var get_a
    {

        var a = 0
        f1 = function {
            // {
            // a = a + 1
            // }
            a = a + 1
        }
        get_a = function {
            return a
        }
    }
    f1()
    f1()
    lib_assert_counter.assert(get_a(), 2, "Failed Double UpValue Test 1.")
}

//////////////////////////////// end scratch
machine.trim()

if (errors == 0){
    write_line("No errors found! :)")
}
else{
    write(new_line())
    write_line(":( " .. errors .. " errors found!")
}
write_line("-- Finished tests! --")
write_line("Elapsed time: " .. start_time:elapsed() .. " ms")
write_line("Loaded modules: " .. machine.modules())
write_line(machine.memory_use())