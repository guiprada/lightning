write_line("*** Welcome to lightning test suite Zzz :) ***")
{
    var os_string = get_os()
    var os = "Unknown"
    if (os_string:contains("Windows")){
        os = "Windows"
    } else if (os_string:contains("Unix")){
        os = "Unix"
    }

    write_line(get_os())

    var processor_count = machine.processor_count()
    if (processor_count > 1)
        write_line("Running on " .. processor_count .. " processors" )
    else
        write_line("Running Humbly on " .. processor_count .. " processor" )
}

if (roslyn.enabled)
    write_line("Roslyn support! :)")
else
    write_line("No roslyn support!")

write_line("-- Starting tests --")
var start_time = time.now()

// Let's use some modules
var _assert = require("assert.ltn")
var assert_counter = require("assert_counter.ltn")

var assert = assert_counter.assert
var assert_not = assert_counter.assert_not
var count_errors = assert_counter.get_error_counter
var clear_errors = assert_counter.reset_error_counter

var errors = 0

write_line("Anonymous Call tests ...")
errors += require("tests/anonymous_call.ltn")

write_line("Assert tests ...")
errors += require("tests/assert.ltn")

write_line("Assign Op tests ...")
errors += require("tests/assign_op.ltn")

write_line("Boolean tests ...")
errors += require("tests/boolean.ltn")

write_line("Char tests ...")
errors += require("tests/char.ltn")

write_line("Closure tests ...")
errors += require("tests/closures.ltn")

write_line("Compound Call tests ...")
errors += require("tests/compound_calls.ltn")

write_line("Eval tests ...")
errors += require("tests/eval.ltn")

write_line("IIFE tests ...")
errors += require("tests/iife.ltn")

write_line("Integer tests ...")
errors += require("tests/integers.ltn")

write_line("Iterator tests ...")
errors += require("tests/iterators.ltn")

write_line("Lambda tests ...")
errors += require("tests/lambdas.ltn")

write_line("Lock tests ...")
errors += require("tests/lock.ltn")

write_line("Map tests ...")
errors += require("tests/map.ltn")

write_line("Math tests ...")
errors += require("tests/math.ltn")

write_line("Methods tests ...")
errors += require("tests/methods.ltn")

write_line("Numbers tests ...")
errors += require("tests/numbers.ltn")

write_line("Nuples tests ...")
errors += require("tests/nuples.ltn")

write_line("Option tests ...")
errors += require("tests/option.ltn")

write_line("Pmap tests ...")
errors += require("tests/pmap.ltn")

write_line("Reduce tests ...")
errors += require("tests/reduce.ltn")

write_line("Result ...")
errors += require("tests/result.ltn")

write_line("Rmap tests ...")
errors += require("tests/rmap.ltn")

write_line("Roslyn tests ...")
errors += require("tests/roslyn.ltn")

write_line("Scoping tests ...")
errors += require("tests/scoping.ltn")

write_line("Strings tests ...")
errors += require("tests/strings.ltn")

write_line("Super Table tests ...")
errors += require("tests/super_table.ltn")

write_line("Table tests ...")
errors += require("tests/table.ltn")

write_line("Transient tests ...")
errors += require("tests/transient.ltn")

write_line("Try tests ...")
errors += require("tests/try.ltn")

write_line("Up value tests ...")
errors += require("tests/up_value.ltn")

write_line("VM management tests ...")
errors += require("tests/vm_management.ltn")

machine.trim()
if (errors == 0){
    write_line("No errors found! :)")
}
else{
    write(new_line())
    write_line(":( " .. errors .. " errors found!")
}
write_line("-- Finished tests! --")
write_line("Elapsed time: " .. start_time:elapsed() .. " ms")
// write_line("Loaded modules: " .. machine.modules())
// write_line(machine.memory_use())
write_line("Error count: " .. errors)

//////////////////////////////// scratch
{
    const tests = 1
}
//////////////////////////////// end scratch