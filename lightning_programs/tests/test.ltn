write_line("*** Welcome to lightning test suite Zzz :) ***")

var os_string = get_os()
var os = "Unknown"
if(os_string:contains("Windows"))
    os = "Windows"
else if(os_string:contains("Unix"))
    os = "Unix"

write_line(get_os())

if (intrinsic.create == null){
    write_line("No inline intrinsic support!")
}

write_line("-- Starting tests --")
var start_time = time.now()

// Let's use some modules
var _assert = require("assert.ltn")
var assert_counter = require("assert_counter.ltn")

var assert = assert_counter.assert
var assert_not = assert_counter.assert_not
var count_errors = assert_counter.get_error_counter
var clear_errors = assert_counter.reset_error_counter

var errors = 0
errors += require("tests/assert.ltn")
errors += require("tests/numbers.ltn")
errors += require("tests/strings.ltn")
errors += require("tests/pmap.ltn")
errors += require("tests/rmap.ltn")
errors += require("tests/map.ltn")
errors += require("tests/reduce.ltn")
errors += require("tests/table.ltn")
errors += require("tests/scoping.ltn")
errors += require("tests/up_value.ltn")
errors += require("tests/closures.ltn")
errors += require("tests/lambdas.ltn")
errors += require("tests/boolean.ltn")
errors += require("tests/iterators.ltn")
errors += require("tests/methods.ltn")
errors += require("tests/compound_calls.ltn")
errors += require("tests/transient.ltn")
errors += require("tests/math.ltn")
errors += require("tests/eval.ltn")
errors += require("tests/maybe.ltn")
errors += require("tests/assign_op.ltn")
errors += require("tests/lock.ltn")
errors += require("tests/vm_management.ltn")
errors += require("tests/inline_intrinsics.ltn")
errors += require("tests/nuples.ltn")
errors += require("tests/super_table.ltn")
errors += require("tests/char.ltn")
errors += require("tests/integers.ltn")
errors += require("tests/anonymous_call.ltn")
errors += require("tests/try.ltn")

//////////////////////////////// scratch
{
    var a_table = [
        value: 100,
        a_function: \{return 99}
    ]
    assert(a_table.a_function(), 99, "Failed Table Map Access By Literal String 2." )
    var name = "a_function"
    assert(a_table[name](), 99, "Failed Table Map Access By Literal String 3." )
    assert(a_table["a_function"](), 99, "Failed Table Map Access By Literal String 4." )
    assert(a_table["a" .. "_function"](), 99, "Failed Table Map Access By Literal String 4." )
}
{
    // Testing method calls

    function make_player()
    {
        var player = []
        player.position = [];
        player.position["x"] = 0
        player.position["y"] = 0

        player.move = function (self, x, y)
        {
            self.position.x = self.position.x + x;
            self.position.y = self.position.y + y;
            return self.position
        }
        player[2] = player.move

        return player
    }

    var p1 = make_player();
    assert(p1:move(1,0).x, 1, "Failed method call test 1.")
    assert(p1:move(0,3).y, 3, "Failed method call test 2.")
    var name = "move"
    assert(p1[name](p1,0,3).y, 6, "Failed method call test 3.")
    assert(p1:[name](0,0).y, 6, "Failed method call test 4.")
    assert(p1:"move"(0,0).y, 6, "Failed method call test 5.")
    assert(p1["move"](p1,0,0).y, 6, "Failed method call test 6.")
    assert(p1:["move"](0,0).y, 6, "Failed method call test 7.")
    assert(p1:[1 + 1](0,0).y, 6, "Failed method call test 7.")
    assert(p1:["mo".."ve"](0,0).y, 6, "Failed method call test 7.")

}
//////////////////////////////// end scratch
machine.trim()

if (errors == 0){
    write_line("No errors found! :)")
}
else{
    write(new_line())
    write_line(":( " .. errors .. " errors found!")
}
write_line("-- Finished tests! --")
write_line("Elapsed time: " .. start_time:elapsed() .. " ms")
write_line("Loaded modules: " .. machine.modules())
write_line(machine.memory_use())