var eiei = 5
write_line(eiei++)

var assert_teste = function(value1, value2, msg)
{
    write_line(type(eiei++))

    var result = false
    if(result == false){
        type(eiei);
        (eiei ++)
    }
    return result
}
assert_teste(1, 2, "teste")
write_line(type(eiei))
write_line(eiei)




write_line("*** Welcome to lightning test suite Zzz :) ***")

var os_string = get_os()
var os = "Unknown"
if(os_string:contains("Windows"))
    os = "Windows"
else if(os_string:contains("Unix"))
    os = "Unix"

write_line(get_os())
write_line("-- Starting tests --")
var start_time = time.now()

// Let's use some modules
var _assert = require("assert.ltn")
var lib_assert_counter = require("assert_counter.ltn")

var count_errors = lib_assert_counter.get_error_counter
var clear_errors = lib_assert_counter.reset_error_counter

require("tests/test_assert.ltn")



/////// old
var assert = lib_assert_counter.assert
var assert_not = lib_assert_counter.assert_not
{
    // Numbers Comparisson
    var num1 = 1
    var num2 = 2
    assert(num1, 1, "Failed numbers comparisson test 1.")
    assert_not(num1, 2, "Failed numbers comparisson test 2.")
    assert_not(num1, num2, "Failed numbers comparisson test 3.")
    num2 = 1
    assert(num1, num2, "Failed numbers comparisson test 4.")
}
{
    // String Comparisson
    var hello = "hello"
    var world = "world"
    assert("hello", hello, "Failed string concatenation test 1.")
    assert_not(hello, "world", "Failed string concatenation test 2.")
    assert_not(hello, world, "Failed string concatenation test 3.")
}
{
    //String concatenation
    var hello = "hello"
    var world = "world"
    var result = "hello" + " " + "world!"
    assert(result, "hello world!", "Failed string concatenation test 1.")
    assert_not(result, "world!", "Failed string concatenation test 2.")
}
{
    // Table test
    var this_list = []
    this_list.a = "a"
    this_list.b = "b"
    var this_list_alias = this_list
    assert(this_list_alias, this_list, "Failed Table test 1.")
    assert_not([a:"a",b:"b"], this_list, "Failed Table test 2.")
    assert_not([a:"b",b:"b"], this_list, "Failed Table test 3.")
    assert_not([], this_list, "Failed Table test 4.")
    assert(table.count(this_list), 2, "Failed Table test 5")
    assert(table.map_count(this_list), 2, "Failed Table test 6")
    assert(table.list_count(this_list), 0, "Failed Table test 7")

    var this_array = this_list
    this_array[0] = 100
    this_array[1] = null
    this_array[99] = 0
    assert(this_array[0], 100, "Failed Array test 1.")
    assert(this_array[1], null, "Failed Array test 2.")
    assert(this_array[99], 0, "Failed Array test 3.")
    assert(table.count(this_list), 5, "Failed Array test 4")
    assert(table.list_count(this_array), 2, "Failed Array test 5.")
    assert(table.map_count(this_list), 3, "Failed Array test 6.")

    var table_negative = []
    table_negative[-1] = 5
    assert(table_negative[-1], 5, "Failed Table Negative Index Test 1.")
}
{
    // Table literal test
    var this_table = [null, null, null, null, null, 5:"hello"]
    for(var i = 0; i<5; i++){
        assert(this_table[i], null, "Failed Table Literal test " + (i+1) + ".")
    }
    assert(this_table[5], "hello", "Failed Table Literal test 6.")

    var another_table = [ "brazil":"Brasilia", eua:"Washington", australia:"Canberra",]
    assert(another_table.brazil, "Brasilia", "Failed Table Literal test 7.")
    assert(another_table.australia, "Canberra", "Failed Super Table Test 3.")

    // Testing Table negative
    var table_teste = [5:0, -11, -1:2]
    assert(table_teste[0], -11, "Failed Table Literal Negative Value Test 1.")
    assert(table_teste[-1], 2, "Failde Table Literal Negatiev Index Test 1.")
}
{
    // Testing lexical scoping
    var a = "a"
    {
        var a = "b"
        assert(a, "b", "Failed lexical scoping test 1.")

    }
    assert(a, "a", "Failed lexical scoping test 2.")
}
{
    // Testing a lamba function
    var lambda = function (a, b, c)
    {
	    return (a+b)/c;
    }
    assert(lambda(1,2,3), 1, "Failed Lambda test 1.")
}
{
    // Testing closures
    function make_say(value)
    {
        return function ()
        {
            return value
        }
    }
    var doughnut = make_say("doughnut")
    var bagel = make_say("bagel")
    assert(doughnut(), "doughnut", "Failed Closure test 1.")
    assert(bagel(), "bagel", "Failed Closure test 2.")

    function make_changer()
    {
        var local = "";
        function closure()
        {
            local = local + " extra";
            return local
        }
        return closure;
    }

    var changer = make_changer();
    assert(changer(), " extra", "Failed Closure test 3.")
    assert(changer(), " extra extra", "Failed Closure test 4.")
    assert(changer(), " extra extra extra", "Failed Closure test 5.")

    function make_accumulator(value)
    {
        var counter = value
        return function (x)
        {
            counter = counter + x
            return counter;
        }
    }
    var my_acc = make_accumulator(5)
    assert(my_acc(-5), 0, "Failed Closure test 6.")
    assert(my_acc(5), 5, "Failed Closure test 7.")
}
{
    // Testing boolean operations
    //AND
    assert(false, (false and false), "Failed AND test 1.");
    assert(false, (false and true), "Failed AND test 2.");
    assert(false, (true and false), "Failed AND test 3.");
    assert(true, (true and true), "Failed AND test 4.");

    //OR
    assert(false, (false or false), "Failed OR test 1.");
    assert(true, (false or true), "Failed OR test 2.");
    assert(true, (true or false), "Failed OR test 3.");
    assert(true, (true or true), "Failed OR test 4.");

    //XOR
    assert(false, (false xor false), "Failed XOR test 1.");
    assert(true, (false xor true), "Failed XOR test 2.");
    assert(true, (true xor false), "Failed XOR test 3.");
    assert(false, (true xor true), "Failed XOR test 4.");

    //NOT
    assert(false, !true, "Failed NOT test 1.");
    assert(true, !false, "Failed NOT test 2.");

    //NAND
    assert(true, (false nand false), "Failed NAND test 1.");
    assert(true, (false nand true), "Failed NAND test 2.");
    assert(true, (true nand false), "Failed NAND test 3.");
    assert(false, (true nand true), "Failed NAND test 4.");

    //NOR
    assert(true, (false nor false), "Failed NOR test 1.");
    assert(false, (false nor true), "Failed NOR test 2.");
    assert(false, (true nor false), "Failed NOR test 3.");
    assert(false, (true nor true), "Failed NOR test 4.");

    //XNOR
    assert(true, (false xnor false), "Failed XNOR test 1.");
    assert(false, (false xnor true), "Failed XNOR test 2.");
    assert(false, (true xnor false), "Failed XNOR test 3.");
    assert(true, (true xnor true), "Failed XNOR test 4.");
}
{
    // Some arrays, functions and recursion
    var fibs = []
    function populate_fibs(n)
    {
        var next;
        var num = 1;
        var ant = 0;
        var i = 0;
        while(i <= n)
        {
            fibs[i] = ant;
            next = num + ant;
            ant = num;
            num = next;
            i = i + 1;
        }
    }
    populate_fibs(50)
    assert(fibs[0], 0, "Failed Fibonacci test 1.")
    assert(fibs[1], 1, "Failed Fibonacci test 2.")
    assert(fibs[2], 1, "Failed Fibonacci test 3.")
    assert(fibs[3], 2, "Failed Fibonacci test 4.")
    assert(fibs[30], 832040, "Failed Fibonacci test 5.")
    assert(fibs[40], 102334155, "Failed Fibonacci test 6.")

    function rec_fib(n)
    {
        if (n < 2)
        {
            return n;
        }
        return rec_fib(n -1) + rec_fib(n -2);
    }

    assert(rec_fib(0), 0, "Failed Fibonacci test 7.")
    assert(rec_fib(1), 1, "Failed Fibonacci test 8.")
    assert(rec_fib(10), fibs[10], "Failed Fibonacci test 9.")
}
{
    // Testing multi dimensional arrays
    var matrix = []
    var lines = 10
    var columns = 3
    for (var i = 0; i < 10; i++)
    {
        matrix[i] = []
        for (var j = 0; j < columns; j++)
        {
            matrix[i][j] = i + j
        }
    }
    assert(matrix[0][0], 0, "Failed multi dimensional array test 1.")
    assert(matrix[9][2], 11, "Failed multi dimensional array test 2.")
}
{
    // Testing an iterator :)
    function make_iterator(init)
    {
        var counter = init;
        function closure(i)
        {
            counter = counter + i
            return counter
        }
        return closure
    }

    var i = make_iterator(0)
    var j = 0
    var array = []
    while( j < 10)
    {
        array[j] = j
        j = i(1)
    }
    i = make_iterator(0);
    for (var j = 0; j < 10; j = i(1))
    {
        assert(array[j], j, "Failed iterator test " + j + ".")
    }
}
{
    // Testing method calls

    function make_player()
    {
        var player = []
        player.position = [];
        player.position["x"] = 0
        player.position["y"] = 0

        player.move = function (self, x, y)
        {
            self.position.x = self.position.x + x;
            self.position.y = self.position.y + y;
            return self.position
        }
        return player
    }

    var p1 = make_player();
    assert(p1:move(1,0).x, 1, "Failed method call test 1.")
    assert(p1:move(0,3).y, 3, "Failed method call test 2.")
}
{
    // Testing "hidden properties"
    function make_player()
    {
        var player = []
        var x = 0
        var y = 0

        player.move = function (_, p_x, p_y)
        {
            x = x + p_x;
            y = y + p_y;
            return [x:x, y:y]
        }
        return player
    }

    var p1 = make_player()
    var p2 = make_player()

    assert(p1:move(1,1).x, 1, "Failed hidden properties test 1.")
    assert(p1:move(0,2).y, 3, "Failed hidden properties test 2.")
    assert(p2:move(0,2).y, 2, "Failed hidden properties test 3.")
}
{
    // Testing "hidden properties" 2
    function make_player()
    {
        var player = []
        var x = 0
        var y = 0

        player.move = function (p_x, p_y)
        {
            x = x + p_x;
            y = y + p_y;
            return [x:x, y:y]
        }
        return player
    }

    var p1 = make_player()
    var p2 = make_player()

    assert(p1.move(1,1).x, 1, "Failed hidden properties test 4.")
    assert(p1.move(0,2).y, 3, "Failed hidden properties test 5.")
    assert(p2.move(0,2).y, 2, "Failed hidden properties test 6.")
}
{
    // // Testing compound calls
    //     function return_table_with_function ()
    //     {
    //         return function ()
    //         {
    //             var closure = function (value)
    //             {
    //                 return value
    //             }
    //             return [another_function: closure]
    //         }
    //     }

    // assert(return_table_with_function ()().another_function ("viva"), "viva", "Failed compound calls test 1.")

    // var func1 = return_table_with_function ()
    // assert(func1().another_function ("viva"), "viva", "Failed compound calls test 2.")

    // var table1 = []
    // {
    //     table1.inner_table = []
    //     table1.inner_table.x = 1
    //     table1.inner_table.closure =
    //     function (self)
    //     {
    //         return [x:self.x, y:2]
    //     }
    // }

    // assert(table1.inner_table:closure().x, 1, "Failed compound calls test 3.")
}
{
    // Transient tests
    var a = 5
    var b = a
    a = 3
    assert(a, 3, "Failed Transient Test 1.")
    assert(b, 5, "Failed Transient Test 2.")

    var str1 = "Hello"
    var str2 = str1
    str1 = "World"
    assert_not(str1, str2, "Failed Transient Test 3.")

    var fun1 = math.sin
    var fun2 = fun1
    fun1 = write_line
    assert_not(fun1, fun2, "Failed Transient Test 4.")

    var table1 = [1,2]
    var table2 = table1
    table1[2] = 3
    assert(table2[2], 3, "Failed Transient Test 5.")

    table2 = null
    assert(table1[2], 3, "Failed Transient Test 6.")

    var truthy
    var falsy = false
    truthy = falsy
    truthy = true
    assert(falsy, false, "Failed Transient Test 7.")

    var something
    var nothing = null
    something = nothing
    something = 1
    assert(nothing, null, "Failed Transient Test 8.")

    var list1 = [0,1,2]
    var list2 = list1
    assert(list2, list1, "Failed Transient Test 9.")
}
{
    // Testing Prelude
    assert(math.pi, 3.141592653589793, "Failed Prelude test 1.")
    assert(math.sin(math.pi/2), 1, "Failed Prelude test 2.")
}
{
    // Testing Eval
    var my_prog1 = #
        var table1 = []
        var str_global = "global"
        {
            var str_upvalue = "up"
            table1.append =
                function (value1, value2, value3){
                    return str_global + value1  + value2 + value3 + str_upvalue
                }
        }
        return table1
    #
    var a = eval(my_prog1)
    //var a = require("prog1.ltn")

    assert(a.append("a","b","c"),"globalabcup", "Failed Eval test 1.")

    var my_prog2 = #
        var str_global = "global"
        var str_upvalue = "up"
        return function (value1, value2, value3){
                return str_global + value1  + value2 + value3 + str_upvalue
            }
    #
    file.write("file_write_test.ltn", my_prog2)
    file.append("file_write_test.ltn", my_prog1)
    a = eval(my_prog2)
    // a = require("prog2.ltn")
    assert(a("a","b","c"),"globalabcup", "Failed Eval test 2.")
}
{
    // Testing Maybe init
    var a = null
    var b = null
    var c = null
    var d = 3
    var e = maybe(maybe(maybe(a, b), c), d)
    d = 1
    assert(e, 3, "Failed maybe init test 1.")
}
{
    // Testing Math
    assert(math.mod(7,3), 1, "Failed Math test 1.")
}
{
    // Testing ASSIGN_VARIABLE ops
    var i = 0
    i+=1
    assert(i, 1, "Failed ASSIGN_VARIABLE Ops Test 1.")
    i*=10
    assert(i, 10, "Failed ASSIGN_VARIABLE Ops Test 2.")
    i/=2
    assert(i, 5, "Failed ASSIGN_VARIABLE Ops Test 3.")
    i-=10
    assert(i, -5, "Failed ASSIGN_VARIABLE Ops Test 4.")
}
{
    // Testing for_range
    var n = 100
    var table1 = []
    table.list_init(table1, n)
    function many_for (start, end, this_table)
    {
        for (var i = start; i<end; i++)
        {
            this_table[i] = i
        }
    }
    for_range(6, table1, many_for)
    for (var i = 0; i<n; i++)
    {
        assert(table1[i], i, "Failed for_range Test 1, iteration: " + i + ".")
    }

    for_range(1, table1, many_for)
    for (var i = 0; i<n; i++)
    {
        assert(table1[i], i, "Failed for_range Test 2, iteration: " + i + ".")
    }

    for_range(3, table1, many_for)
    for (var i = 0; i<n; i++)
    {
        assert(table1[i], i, "Failed for_range Test 3, iteration: " + i + ".")
    }

    for_range(200, table1, many_for)
    for (var i = 0; i<n; i++)
    {
        assert(table1[i], i, "Failed for_range Test 4, iteration: " + i + ".")
    }
}
{
    // Testing for_each
    var n = 100
    var table1 = table.list_new(n)

    function many(index, collection)
    {
        collection[index] = []
        collection[index].x = 1
    }
    for_each(table1, many)
    for (var i = 0; i<n; i++)
    {
        assert(table1[i].x, 1, "Failed for_each Test 1, iteration:" + i + ".")
    }

    table1 = table.list_new(n)
    function many_number(index, collection)
    {
        collection[index] = 1
    }
    for_each(table1, many_number)
    for (var i = 0; i<n; i++)
    {
        assert(table1[i], 1, "Failed for_each Test 2, iteration: " + i + ".")
    }

    table1 = table.list_new(n)
    for_each(table1, function(index, collection)
    {
        collection[index] = 100 - index
    })
    for (var i = 0; i<n; i++)
    {
        assert(table1[i], n - i, "Failed for_each Test 3, iteration: " + i + ".")
    }
}
// Testing Global Lock
var global_lock_test_counter = 5
{
    var n = 1000
    function many(index, collection)
    {
        global_lock_test_counter++;
    }
    for_range(n, [], many)
    assert(global_lock_test_counter, n + 5, "Failed Global Lock Test 1.")
}
{
    // Testing UpValue Lock
    var n = 1000
    var upvalue_lock_test_counter = 5
    function many(index, collection)
    {
        upvalue_lock_test_counter++;
    }
    for_range(n, [], many)
    assert(upvalue_lock_test_counter, n + 5, "Failed UpValue Lock Test 1.")
}
{
    // Testing VMs management
    var totalVMs = machine.count_vms()
    var halth = math.idiv(totalVMs, 2)
    machine.release_vms(halth)
    assert(machine.count_vms(), totalVMs - halth, "Failed VMs management Test 1.")

    machine.release_all_vms()
    assert(machine.count_vms(), 0, "Failed VMs management Test 0.")
}
{
    // Testing increment and decrement
    var j = 1
    var j1 = --j
    assert(j1, 0, "Failed Increment Test 1.")
    j = 2
    j1 = j+=1 // chained ASSIGN_VARIABLEment op works weird, this is equivalent to j1 = + = 1
    assert(j1, 1, "Failed Increment Test 2.")
    var j2 = 0
    j2++
    assert(j2, 1, "Failed Increment Test 2.")
}
{
    // Testing List
    var new_list = []
    table.push(new_list, 3)
    table.push(new_list, 2)
    table.push(new_list, 1)
    assert(new_list[0], 3, "Failed List test 1.")
    assert(new_list[1], 2, "Failed List test 2.")
    assert(new_list[2], 1, "Failed List test 3.")

    var list_copy = table.list_copy(new_list)
    assert_not(list_copy, new_list, "Failed List test 4.")
    table.pop(new_list)
    table.pop(new_list)
    table.pop(new_list)
    assert(table.list_count(new_list), 0, "Failed List test 5.")
    assert(table.list_count(list_copy), 3, "Failed List test 6.")

    list_copy.hey = "hey"
    table.list_clear(list_copy)
    assert(table.list_count(list_copy), 0, "Failed List test 7.")
    assert(table.map_count(list_copy), 1, "Failed List test 8.")
    table.push(list_copy, 1)
    table.map_clear(list_copy)
    assert(table.list_count(list_copy), 1, "Failed List test 9.")
    assert(table.map_count(list_copy), 0, "Failed List test 10.")
    list_copy.hey = "hey"
    table.clear(list_copy)
    assert(table.list_count(list_copy), 0, "Failed List test 9.")
    assert(table.map_count(list_copy), 0, "Failed List test 10.")
    assert(table.count(list_copy), 0, "Failed List test 11.")
}
{
    // Testing inline Intrinsics
    var intr_sum =
    #
        using Number = System.Double;
        using System;

        (vm) =>{
            Number opA = vm.GetNumber(0);
            Number opB = vm.GetNumber(1);

            return new Unit(opA + opB);
        }
    #
    if (intrinsic.create != null){
        var sum_intr = intrinsic.create("sum", 2, intr_sum)
        assert(sum_intr(5, 6), 11, "Failed inline Intrinsic test 1.")
    }else{
        write_line("No inline intrinsic support!")
    }
}
{
    // Testing iterators
    var table1 = [brazil:"Brasilia", eua:"Washington", australia:"Canberra"]
    var indexes_table1 = table.map_indexes(table1)
    var counter = 0
    for (var it = table.map_iterator(table1); it.next())
    {
        assert(it.key, indexes_table1[counter], "Failed iterator key Test 1, iteration: " + counter)
        assert(it.value, table1[it.key], "Failed iterator value Test 1, iteration: " + counter)
        counter++
    }
    assert(table.list_to_string(table.map_indexes(table1)), "australia, eua, brazil", "Failed iterator Test 2")
    assert(table.map_to_string(table1), "australia : Canberra, eua : Washington, brazil : Brasilia", "Failed iterator Test 3")

    ///////////////////////////////
    var list1 = [0, 1, 2, 3, 4, 5]
    counter = 0
    for (var it = table.list_iterator(list1); it.next())
    {
        assert(it.value, list1[counter], "Failed iterator value Test 4, iteration: " + counter)
        counter++
    }

    ///////////////////////////////
    counter = 0
    for (var it = table.list_index_iterator(list1); it.next())
    {
        assert(it.key, counter, "Failed iterator key Test 5, iteration: " + counter)
        assert(it.value, list1[counter], "Failed iterator value Test 5, iteration: " + counter)
        counter++
    }

    var sparse_array = [5:5, 10:10, 15:15]
    counter = 0
    for(var it=table.map_numeric_iterator(sparse_array); it.next()){
        assert(sparse_array[it.key], it.value, "Failed iterator value Test 6, iteration: " + counter)
        counter++
    }
    assert(counter, 3, "Failed iterator value Test 6, iteration: " + counter)
}
{
    // Testing tuples
    var tuple1 = tuple.new(1, "hello")
    assert(tuple1:get_x(), 1, "Failed Tuples Test 1.")
    assert(tuple1:get_y(), "hello", "Failed Tuples Test 2.")

    tuple1:set_x("hello")
    tuple1:set_y("world")
    assert(tuple1:get_x(), "hello", "Failed Tuples Test 3.")
    assert(tuple1:get_y(), "world", "Failed Tuples Test 4.")
}
{
    // Testing nuples
    var nuple1 = nuple.from_table([1, "hello"])
    assert(nuple1:get(0), 1, "Failed Nuples Test 1.")
    assert(nuple1:get(1), "hello", "Failed Nuples Test 2.")

    nuple1:set(0, "hello")
    nuple1:set(1, "world")
    assert(nuple1:get(0), "hello", "Failed Nuples Test 3.")
    assert(nuple1:get(1), "world", "Failed Nuples Test 4.")

    var nuple2 = nuple.new(5)
    assert(nuple2:size(), 5, "Failed Nuples Test 5")
}
{
    // Testing super table
    var super_table = [ brazil:"Brasilia", eua:"Washington", australia:"Canberra",]
    var common_table = []
    table.set_super(common_table, super_table)
    assert(common_table.brazil, "Brasilia", "Failed Super Table Test 1.")
    common_table.brazil = "hello"
    assert(common_table.brazil, "hello", "Failed Super Table Test 2.")
    assert(super_table.brazil, "Brasilia", "Failed Super Table Test 3.")

    super_table.a_function = function(self){
        return self.brazil
    }
    assert(common_table:a_function(), "hello", "Failed Super Table Test 4.")
    assert(super_table:a_function(), "Brasilia", "Failed Super Table Test 5.")

    var Table = table.list_new(5)
    table.set_super(Table, table)
    assert(Table:count(), 5, "Failed Super Table Test 6.")
}
{
    // Testing Char
    var another_a = 'a'
    assert(another_a, 'a', "Failed Char Test 1.")
    var hello_string = "hello"
    assert('h', hello_string:char_at(0), "Failed Char Test 2.")
    assert('o', hello_string:char_at(4), "Failed Char Test 3.")
    var char_list = hello_string:to_list()
    assert('h', char_list[0], "Failed Char Test 4.")
    assert('o', char_list[4], "Failed Char Test 5.")
    var line_skip_string =
"a
a"
    write_raw(line_skip_string)
    write_line_raw(line_skip_string)
    var new_line = new_line()
    var new_line_size = new_line:length()
    if(new_line_size == 2){
        assert('\n', line_skip_string:char_at(2), "Failed Char Test 6.")
        assert('a', line_skip_string:char_at(3), "Failed Char Test 7.")
        assert('a', line_skip_string:char_at(0), "Failed Char Test 8.")
        assert('\r', line_skip_string:char_at(1), "Failed Char Test 9.")
    }else if(new_line_size == 1){
        assert('\n', line_skip_string:char_at(1), "Failed Char Test 6.")
        assert('a', line_skip_string:char_at(2), "Failed Char Test 7.")
        assert('a', line_skip_string:char_at(0), "Failed Char Test 8.")
    }
}
{
    // Testing String Contains
    var hello_world_string = "hello world"
    assert(hello_world_string:contains("hello"), true, "Failed String Contains Test 1.")
    assert(hello_world_string:contains("world"), true, "Failed String Contains Test 2.")
    assert(hello_world_string:contains("llo wo"), true, "Failed String Contains Test 3.")
    assert(hello_world_string:contains("hey"), false, "Failed String Contains Test 4.")
    assert(hello_world_string:contains("_wor"), false, "Failed String Contains Test 5.")
    assert(hello_world_string:contains_char('e'), true, "Failed String Contains Test 6.")
    assert(hello_world_string:contains_char('l'), true, "Failed String Contains Test 7.")
    assert(hello_world_string:contains_char('g'), false, "Failed String Contains Test 8.")
}
{
    // Testing Integer
    assert(1.0, 1, "Failed Integer test 1.")
    assert_not(1.000000000000001, 1, "Failed Integer test 2.")
    assert((0.5 + 0.5), 1, "Failed Integer test 3.")
    var this_list = []
    this_list[5.1] = 10
    this_list[5] = 20
    assert_not(this_list[5.1], this_list[5], "Failed Integer Test 4.")
}
{
    // Testing Table Class
    var testTable = table.new();
    testTable[-1] = -1

    assert(testTable:count(), 1, "Failed Table Class Test 1.")
    assert(testTable:map_count(), 1, "Failed Table Class Test 2.")
    assert(testTable:list_count(), 0, "Failed Table Class Test 3.")

    var testTableClone = testTable:clone()
    assert(testTableClone:count(), 1, "Failed Table Class Test 4.")
    assert(testTableClone:map_count(), 1, "Failed Table Class Test 5.")
    assert(testTableClone:list_count(), 0, "Failed Table Class Test 6.")
}
{
    // Testing Append and Alphanumeric Addition
    var char_o = 'o'
    var char_a = 'a'
    assert((1 .. 2  + char_o + 3 + 5 + " " .. char_a), "12o35 a", "Failed Append and Alphanumeric Addition Test 1.")
    assert((1 + 2  + char_o + 3 + " " .. char_a), "3o3 a", "Failed Append and Alphanumeric Addition Test 1.")
}
machine.trim()

write_line("")
if (count_errors() == 0){
    write_line("No errors found! :)")
}
else{
    write_line(":( " + count_errors() + " errors found!")
}
write_line("-- Finished tests! --")
write_line("Elapsed time: " + start_time:elapsed() + " ms")
write_line("Loaded modules: " + machine.modules())
write_line(machine.memory_use())

//////////////////////////////// scratch
{
    // Testing List sort
    var this_list = [3, 1, false, 2, 'a', null, 0, '0', "string"]
    table.list_sort(this_list)
}

var str = "hey"
// write_line({"ei"}:char_at(0))
str.teste = function(self){
    write_line(self)
    return null
}
str:teste()

// var str2 = read_line()
// write_line("lightning" + str2:unescape() + str2:escape())
// // write_line("lightning" + read_line():unescape() + str2:escape())
var array1 = []
var a = 1;
function wrong(text, more_text){
    write_line(text)
    write_line(more_text)
    write_line(array1[0])
    a = 2;
}
var success = try(wrong, ["oi", "mundo"])
write_line("success: " .. success .. " a: " .. a)
if(!success)
    write_line("recovered")

write_line(machine.memory_use())