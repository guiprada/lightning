var assert_counter = require("assert_counter.ltn")
var assert = assert_counter.assert
var assert_not = assert_counter.assert_not
{
    // Testing an iterator :)
    function make_iterator(init)
    {
        var counter = init;
        function closure(i)
        {
            counter = counter + i
            return counter
        }
        return closure
    }

    var i = make_iterator(0)
    var j = 0
    var array = []
    while( j < 10)
    {
        array[j] = j
        j = i(1)
    }
    i = make_iterator(0);
    for (var j = 0; j < 10; j = i(1))
    {
        assert(array[j], j, "Failed iterator test " .. j .. ".")
    }
}
{
    // Testing iterators
    var table1 = [brazil:"Brasilia", eua:"Washington", australia:"Canberra"]
    var indexes_table1 = table1:map_indexes()
    var counter = 0
    for (var it = table1:map_iterator(); it.next())
    {
        assert(it.key, indexes_table1[counter], "Failed iterator key Test 1, iteration: " .. counter)
        assert(it.value, table1[it.key], "Failed iterator value Test 1, iteration: " .. counter)
        counter++
    }
    assert((table1:map_indexes()):list_to_string(), "australia, eua, brazil", "Failed iterator Test 2")
    assert(table1:map_to_string(), "australia : Canberra, eua : Washington, brazil : Brasilia", "Failed iterator Test 3")

    ///////////////////////////////
    var list1 = [0, 1, 2, 3, 4, 5]
    counter = 0
    for (var it = list1:list_iterator(); it.next())
    {
        assert(it.value, list1[counter], "Failed iterator value Test 4, iteration: " .. counter)
        counter++
    }

    ///////////////////////////////
    counter = 0
    for (var it = list1:list_index_iterator(); it.next())
    {
        assert(it.key, counter, "Failed iterator key Test 5, iteration: " .. counter)
        assert(it.value, list1[counter], "Failed iterator value Test 5, iteration: " .. counter)
        counter++
    }

    var sparse_array = [5:5, 10:10, 15:15]
    counter = 0
    for(var it=sparse_array:map_numeric_iterator(); it.next()){
        assert(sparse_array[it.key], it.value, "Failed iterator value Test 6, iteration: " .. counter)
        counter++
    }
    assert(counter, 3, "Failed iterator value Test 6, iteration: " .. counter)
}
return assert_counter.get_error_counter()