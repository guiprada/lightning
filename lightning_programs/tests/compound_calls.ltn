var assert_counter = require("assert_counter.ltn")
var assert = assert_counter.assert
var assert_not = assert_counter.assert_not
{
    // Testing compound calls
    function return_table_with_function ()
    {
        return function ()
        {
            var closure = function (value)
            {
                return value
            }
            return [another_function: closure]
        }
    }

    var func1 = return_table_with_function ()
    assert(func1().another_function("viva"), "viva", "Failed compound calls test 1.")

    assert(return_table_with_function()().another_function("viva"), "viva", "Failed compound calls test 2.")
    var table1 = []
    {
        table1.inner_table = []
        table1.inner_table.x = 1
        table1.inner_table.closure =
        function (self)
        {
            return [x:self.x, y:2]
        }
    }
    assert(table1.inner_table:closure().x, 1, "Failed compound calls test 3.")

    var table2 = []
    table2.value = 99
    table2.return_function = \(self){
        return \{
            return self.value
        }
    }
    assert(table2:return_function()(), 99, "Failed compound calls test 4.")
}
{
    // Testing Grouping after function Call
    var null_func = function(){}
    var result = 0
    null_func()
    result++
    assert(result, 1, "Failed Grouping after function call Test.")
}
return assert_counter.get_error_counter()