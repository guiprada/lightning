var assert_counter = require("assert_counter.ltn")
var assert = assert_counter.assert
var assert_not = assert_counter.assert_not
{
	// Testing csharp module
	var csharp_sum =
	#
		// return (System.Int32)(5 + 6);
		5 + 6
	#
	if (csharp.eval != null){
		var result = csharp.eval(csharp_sum)
		assert(result, 11, "Failed csharp.eval test 1. ")
	}

	var csharp_char =
	#
		// char a = 'a';
		// a
		'a'
	#
	if (csharp.eval != null){
		var result = csharp.eval(csharp_char)
		assert(result, 'a', "Failed csharp.eval test 2. ")
	}

	var csharp_string =
	#
		// System.String aa = "aa";
		// aa
		"aa"
	#
	if (csharp.eval != null){
		var result = csharp.eval(csharp_string)
		assert(result, "aa", "Failed csharp.eval test 3. ")
	}

	var csharp_bool =
	#
		true
	#
	if (csharp.eval != null){
		var result = csharp.eval(csharp_bool)
		assert(result, true, "Failed csharp.eval test 4. ")
	}

	var csharp_null =
	#
		null
	#
	if (csharp.eval != null){
		var result = csharp.eval(csharp_null)
		assert(result, null, "Failed csharp.eval test 5. ")
	}

	var csharp_unknown =
	#
		(System.Int128)1
	#
	if (csharp.eval != null){
		var result = csharp.eval(csharp_unknown)
		assert_not(result, null, "Failed csharp.eval test 6. ")
		assert_not(result, 1, "Failed csharp.eval test 7. ")
	}

	var csharp_sum_func_code =
	#
		using System;
		using Number = System.Double;
		using lightning;

		(vm) => {
			Number opA = vm.GetNumber(0);
			Number opB = vm.GetNumber(1);

			return new Unit(opA + opB);
		}
	#
	if (csharp.script_compile != null){
		var csharp_sum_func = csharp.script_compile("csharp_sum_func", 2, csharp_sum_func_code)
		assert(csharp_sum_func(5, 6), 11, "Failed csharp.script_compile test 1.")
	}

	var csharp_native_sum_func_code =
	#
	using System;
	using System.IO;
	namespace RoslynCore
	{
		public static class Helper
		{
			public static double CalculateCircleArea(double radius)
			{
				return radius * radius * Math.PI;
			}
		}
	}
	#
	if (csharp.compile != null){
		var csharp_native_sum_func = csharp.compile("csharp_native_sum_func", 0, csharp_native_sum_func_code)

		if (try(csharp_native_sum_func, [])) {
			assert(csharp_native_sum_func(), 11, "Failed csharp.compile test 1.")
		}
	}
}
return assert_counter.get_error_counter()