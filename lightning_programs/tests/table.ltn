var assert_counter = require("assert_counter.ltn")
var assert = assert_counter.assert
var assert_not = assert_counter.assert_not
{
    // Table test
    var this_table = Table()
    this_table.a = "a"
    this_table.b = "b"
    var this_table_alias = this_table
    assert(this_table_alias, this_table, "Failed Table test 1.")
    assert_not([a:"a",b:"b",], this_table, "Failed Table test 2.")
    assert_not([a:"b",b:"b"], this_table, "Failed Table test 3.")
    assert_not([], this_table, "Failed Table test 4.")
    assert(this_table:count(), 2, "Failed Table test 5")
    assert(this_table:count(), 2, "Failed Table test 6")

    var this_array = this_table
    this_array[0] = 100
    this_array[1] = option_empty()
    this_array[99] = 0
    assert(this_array[0], 100, "Failed Array test 1.")
    assert(this_array[1]:is_ok(), false, "Failed Array test 2.")
    assert(this_array[99], 0, "Failed Array test 3.")
    assert(this_table:count(), 5, "Failed Array test 4")
    assert(this_array:count(), 5, "Failed Array test 5.")

    var table_negative = [:]
    table_negative[-1] = 5
    assert(table_negative[-1], 5, "Failed Table Negative Index Test 1.")
}
{
    // Table literal test
    var this_list = [option_empty(), option_empty(), option_empty(), option_empty(), option_empty(), "hello"]
    for(var i = 0; i<5; i++){
        assert(this_list[i]:is_ok(), false, "Failed Table Literal test " .. (i+1) .. ".")
    }
    assert(this_list[5], "hello", "Failed Table Literal test 6.")

    var another_table = [ "brazil":"Brasilia", eua:"Washington", australia:"Canberra",]
    assert(another_table.brazil, "Brasilia", "Failed Table Literal test 7.")
    assert(another_table.australia, "Canberra", "Failed Super Table Test 3.")

    // Testing Table negative
    var table_teste = [5:0, 0:-11, -1:2]
    assert(table_teste[0], -11, "Failed Table Literal Negative Value Test 1.")
    assert(table_teste[-1], 2, "Failde Table Literal Negatiev Index Test 1.")
}
{
	// Some arrays, functions and recursion
	var fibs = []
	function populate_fibs(n)
	{
		var next;
		var num = 1;
		var ant = 0;
		var i = 0;
		while(i <= n)
		{
			fibs[i] = ant;
			next = num + ant;
			ant = num;
			num = next;
			i = i + 1;
		}
	}
	populate_fibs(50)
	assert(fibs[0], 0, "Failed Fibonacci test 1.")
	assert(fibs[1], 1, "Failed Fibonacci test 2.")
	assert(fibs[2], 1, "Failed Fibonacci test 3.")
	assert(fibs[3], 2, "Failed Fibonacci test 4.")
	assert(fibs[30], 832040, "Failed Fibonacci test 5.")
	assert(fibs[40], 102334155, "Failed Fibonacci test 6.")

	function rec_fib(n)
	{
		if (n < 2)
		{
			return n;
		}
		return rec_fib(n -1) + rec_fib(n -2);
	}

	assert(rec_fib(0), 0, "Failed Fibonacci test 7.")
	assert(rec_fib(1), 1, "Failed Fibonacci test 8.")
	assert(rec_fib(10), fibs[10], "Failed Fibonacci test 9.")
}
{
	// Testing multi dimensional arrays
	var matrix = []
	var lines = 10
	var columns = 3
	for (var i = 0; i < 10; i++)
	{
		matrix[i] = []
		for (var j = 0; j < columns; j++)
		{
			matrix[i][j] = i + j
		}
	}
	assert(matrix[0][0], 0, "Failed multi dimensional array test 1.")
	assert(matrix[9][2], 11, "Failed multi dimensional array test 2.")
}
{
	// Testing List
	var new_list = []
	new_list:push(3)
	new_list:push(2)
	new_list:push(1)
	assert(new_list[0], 3, "Failed List test 1.")
	assert(new_list[1], 2, "Failed List test 2.")
	assert(new_list[2], 1, "Failed List test 3.")

	var list_copy = new_list:clone()
	assert_not(list_copy, new_list, "Failed List test 4.")
	new_list:pop()
	new_list:pop()
	new_list:pop()
	assert(new_list:count(), 0, "Failed List test 5.")
	assert(list_copy:count(), 3, "Failed List test 6.")

	list_copy[3] = "hey"
	list_copy:clear()
	assert(list_copy:count(), 0, "Failed List test 7.")
	list_copy:push(1)
	list_copy:clear()
	assert(list_copy:count(), 0, "Failed List test 8.")
	list_copy:push("hey")
	list_copy:clear()
	assert(list_copy:count(), 0, "Failed List test 9.")
}
{
	// Testing Table Class
	var testTable = [:];
	testTable[-1] = -1

	assert(testTable:count(), 1, "Failed Table Class Test 1.")

	var testTableClone = testTable:clone()
	assert(testTableClone:count(), 1, "Failed Table Class Test 2.")
}
{
	// Testing List sort
	var this_list = [6, 7, 1, 100000, 50, 0, -1, 15, 7, -3]
	var ordered_list = [-3, -1, 0, 1, 6, 7, 7, 15, 50, 100000]
	this_list:sort()

	for(var i = 0; i<this_list:count(); i++){
		assert(this_list[i], ordered_list[i], "Failed List Sort Test 1, index: " .. (i+1) ..".")
		this_list:shuffle()
		this_list:sort()
	}

	this_list = ["a", "ab", "b", "aaa", "aba", "aca", "bb"]
	ordered_list = ["a", "aaa", "ab", "aba", "aca", "b", "bb"]
	this_list:sort()

	for(var i=0; i<this_list:count(); i++){
		assert(this_list[i], ordered_list[i], "Failed List Sort Test 2 index: " .. (i+1) ..".")
		this_list:shuffle()
		this_list:sort()
	}

	this_list = ['C', '\n', 'a', 'z', 'm']
	ordered_list = ['\n', 'C', 'a', 'm', 'z']
	this_list:sort()

	for(var i=0; i<this_list:count(); i++){
		assert(this_list[i], ordered_list[i], "Failed List Sort Test 2 index: " .. (i+1) ..".")
		this_list:shuffle()
		this_list:sort()
	}
}
{
	// Test Nested Literal table
	var a_table = [
		nested_table: [value: 99],
		value: 100,
	]
	assert(a_table.nested_table.value, 99, "Failed Nested Literal Table Test 1.")
	assert(a_table.value, 100, "Failed Nested Literal Table Test 2.")
}
{
	// Test Table Map Access by literal string
	var a_table = [
		value: 100,
		a_function: \{return 99}
		,
		test: "testing",// Testing for newlines inside table literal

	]
	assert(a_table.a_function(), 99, "Failed Table Map Access By Literal String 2." )
	var name = "a_function"
	assert(a_table[name](), 99, "Failed Table Map Access By Literal String 3." )
	assert(a_table["a_function"](), 99, "Failed Table Map Access By Literal String 4." )
	assert(a_table["a" .. "_function"](), 99, "Failed Table Map Access By Literal String 5." )
	assert(a_table["value"], 100, "Failed Table Map Access By Literal String 6.")
}
{
	var a_table = [:]
	function a_table["he" .. "y"] (){
		return 99
	}
	assert(a_table["hey"](), 99, "Failed Expression Indexed Member Function Declaration Test 1.")
}
{
	var a_list = []
	try(
		list.init,
		[a_list, 5]
	)
	var a_table = [:]
	var common_table = [hey: "oba"]
	assert(try(
		table.set_extension_table,
		[a_table, common_table]
	), true, "Failed Set Extension Table Test 1")
}
return assert_counter.get_error_counter()