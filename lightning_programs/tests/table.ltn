var assert_counter = require("assert_counter.ltn")
var assert = assert_counter.assert
var assert_not = assert_counter.assert_not
{
    // Table test
    var this_list = []
    this_list.a = "a"
    this_list.b = "b"
    var this_list_alias = this_list
    assert(this_list_alias, this_list, "Failed Table test 1.")
    assert_not([a:"a",b:"b",], this_list, "Failed Table test 2.")
    assert_not([a:"b",b:"b"], this_list, "Failed Table test 3.")
    assert_not([], this_list, "Failed Table test 4.")
    assert(this_list:count(), 2, "Failed Table test 5")
    assert(this_list:map_count(), 2, "Failed Table test 6")
    assert(this_list:list_count(), 0, "Failed Table test 7")

    var this_array = this_list
    this_array[0] = 100
    this_array[1] = null
    this_array[99] = 0
    assert(this_array[0], 100, "Failed Array test 1.")
    assert(this_array[1], null, "Failed Array test 2.")
    assert(this_array[99], 0, "Failed Array test 3.")
    assert(this_list:count(), 5, "Failed Array test 4")
    assert(this_array:list_count(), 2, "Failed Array test 5.")
    assert(this_list:map_count(), 3, "Failed Array test 6.")

    var table_negative = []
    table_negative[-1] = 5
    assert(table_negative[-1], 5, "Failed Table Negative Index Test 1.")
}
{
    // Table literal test
    var this_table = [null, null, null, null, null, 5:"hello"]
    for(var i = 0; i<5; i++){
        assert(this_table[i], null, "Failed Table Literal test " .. (i+1) .. ".")
    }
    assert(this_table[5], "hello", "Failed Table Literal test 6.")

    var another_table = [ "brazil":"Brasilia", eua:"Washington", australia:"Canberra",]
    assert(another_table.brazil, "Brasilia", "Failed Table Literal test 7.")
    assert(another_table.australia, "Canberra", "Failed Super Table Test 3.")

    // Testing Table negative
    var table_teste = [5:0, -11, -1:2]
    assert(table_teste[0], -11, "Failed Table Literal Negative Value Test 1.")
    assert(table_teste[-1], 2, "Failde Table Literal Negatiev Index Test 1.")
}
{
    // Some arrays, functions and recursion
    var fibs = []
    function populate_fibs(n)
    {
        var next;
        var num = 1;
        var ant = 0;
        var i = 0;
        while(i <= n)
        {
            fibs[i] = ant;
            next = num + ant;
            ant = num;
            num = next;
            i = i + 1;
        }
    }
    populate_fibs(50)
    assert(fibs[0], 0, "Failed Fibonacci test 1.")
    assert(fibs[1], 1, "Failed Fibonacci test 2.")
    assert(fibs[2], 1, "Failed Fibonacci test 3.")
    assert(fibs[3], 2, "Failed Fibonacci test 4.")
    assert(fibs[30], 832040, "Failed Fibonacci test 5.")
    assert(fibs[40], 102334155, "Failed Fibonacci test 6.")

    function rec_fib(n)
    {
        if (n < 2)
        {
            return n;
        }
        return rec_fib(n -1) + rec_fib(n -2);
    }

    assert(rec_fib(0), 0, "Failed Fibonacci test 7.")
    assert(rec_fib(1), 1, "Failed Fibonacci test 8.")
    assert(rec_fib(10), fibs[10], "Failed Fibonacci test 9.")
}
{
    // Testing multi dimensional arrays
    var matrix = []
    var lines = 10
    var columns = 3
    for (var i = 0; i < 10; i++)
    {
        matrix[i] = []
        for (var j = 0; j < columns; j++)
        {
            matrix[i][j] = i + j
        }
    }
    assert(matrix[0][0], 0, "Failed multi dimensional array test 1.")
    assert(matrix[9][2], 11, "Failed multi dimensional array test 2.")
}
{
    // Testing List
    var new_list = []
    new_list:push(3)
    new_list:push(2)
    new_list:push(1)
    assert(new_list[0], 3, "Failed List test 1.")
    assert(new_list[1], 2, "Failed List test 2.")
    assert(new_list[2], 1, "Failed List test 3.")

    var list_copy = new_list:list_copy()
    assert_not(list_copy, new_list, "Failed List test 4.")
    new_list:pop()
    new_list:pop()
    new_list:pop()
    assert(new_list:list_count(), 0, "Failed List test 5.")
    assert(list_copy:list_count(), 3, "Failed List test 6.")

    list_copy.hey = "hey"
    list_copy:list_clear()
    assert(list_copy:list_count(), 0, "Failed List test 7.")
    assert(list_copy:map_count(), 1, "Failed List test 8.")
    list_copy:push(1)
    list_copy:map_clear()
    assert(list_copy:list_count(), 1, "Failed List test 9.")
    assert(list_copy:map_count(), 0, "Failed List test 10.")
    list_copy.hey = "hey"
    list_copy:clear()
    assert(list_copy:list_count(), 0, "Failed List test 9.")
    assert(list_copy:map_count(), 0, "Failed List test 10.")
    assert(list_copy:count(), 0, "Failed List test 11.")
}
{
    // Testing Table Class
    var testTable = Table();
    testTable[-1] = -1

    assert(testTable:count(), 1, "Failed Table Class Test 1.")
    assert(testTable:map_count(), 1, "Failed Table Class Test 2.")
    assert(testTable:list_count(), 0, "Failed Table Class Test 3.")

    var testTableClone = testTable:clone()
    assert(testTableClone:count(), 1, "Failed Table Class Test 4.")
    assert(testTableClone:map_count(), 1, "Failed Table Class Test 5.")
    assert(testTableClone:list_count(), 0, "Failed Table Class Test 6.")
}
{
    // Testing List sort
    var this_list = [3, "string", 1, false, 2, 'a', null, 0, '0']
    var ordered_list = [null, false, '0', 'a', 0, 1, 2, 3, "string"]
    this_list:list_sort()

    for(var i=0; i<(this_list:list_count()); i++){
        assert(this_list[i], ordered_list[i], "Failed List Sort Test 1, iteration: " .. (i+1) ..".")
    }

    this_list = ["a", "ab", "b", "aaa", "aba", "aca", "bb", 2, 3]
    ordered_list = [2, 3, "a", "aaa", "ab", "aba", "aca", "b", "bb"]
    this_list:list_sort()

    for(var i=0; i<(this_list:list_count()); i++){
        assert(this_list[i], ordered_list[i], "Failed List Sort Test 2 iteration: " .. (i+1) ..".")
    }

    var a_function = \return 0
    var a_intrinsic = write_line
    var a = 1
    var a_closure = \{return a}
    var a_table = [1,1]
    var a_module = require("assert.ltn")
    var a_wrapper = time.now()

    this_list = [1, 1.5, null, true, "a_string", 'A', a_function, a_intrinsic, a_closure, a_table, a_module, a_wrapper]

    this_list:list_sort()
    var sorted_list  = this_list:clone()

    for(var i=1; i<=10; i++){
        this_list:list_shuffle()
        this_list:list_sort()
        for(var j=0; j<this_list:list_count(); j++){
            assert(this_list[j], sorted_list[j], "Failed List Sort Test 3 iteration " .. i )
        }
    }
}
{
    // Test Nested Literal table
    var a_table = [
        nested_table: [value: 99],
        value: 100,
    ]
    assert(a_table.nested_table.value, 99, "Failed Nested Literal Table Test 1.")
    assert(a_table.value, 100, "Failed Nested Literal Table Test 2.")
}
{
    // Test Table Map Access by literal string
    var a_table = [
        value: 100,
    ]
    assert(a_table["value"], 100, "Failed Table Map Access By Literal String 1.")
}
return assert_counter.get_error_counter()