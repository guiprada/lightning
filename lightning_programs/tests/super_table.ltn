var assert_counter = require("assert_counter.ltn")
var assert = assert_counter.assert
var assert_not = assert_counter.assert_not
{
    // Testing super table
    var super_table = [ brazil:"Brasilia", eua:"Washington", australia:"Canberra",]
    var common_table = [:]
    common_table:set_super_table(super_table)
    assert(common_table.brazil, "Brasilia", "Failed Super Table Test 1.")
    common_table.brazil = "hello"
    assert(common_table.brazil, "hello", "Failed Super Table Test 2.")
    assert(super_table.brazil, "Brasilia", "Failed Super Table Test 3.")

    super_table.a_function = function(self){
        return self.brazil
    }
    assert(common_table:a_function(), "hello", "Failed Super Table Test 4.")
    assert(super_table:a_function(), "Brasilia", "Failed Super Table Test 5.")

    var a_table = [:]
    a_table.a_function = \(self){return self[0]}
    var this_list = List(0)
    this_list:push(99)
    this_list:append_super_table(a_table)
    assert(this_list:count(), 1, "Failed Super Table Test 6.")
    assert(this_list:a_function(), 99, "Failed Super Table Test 7.")

    var another_table = [:]
    another_table.another_function = \(self){return self[0]}
    this_list:push(100)
    a_table:set_super_table(common_table)

    assert(this_list:count(), 2, "Failed Super Table Test 8.")
    assert(this_list:a_function(), 99, "Failed Super Table Test 9.")
    assert(a_table.eua, "Washington", "Failed Super Table Test 10.")

    assert(this_list:get_super_table():get_super_table(), a_table, "Failed Super Table Test 11.")
    assert(a_table:get_super_table():get_super_table(), super_table, "Failed Super Table Test 12.")
    assert(
        a_table:get_super_table():get_super_table(),
        common_table:get_super_table(),
        "Failed Super Table Test 13.")
}
return assert_counter.get_error_counter()