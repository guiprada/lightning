program         <- declaration* EOF;
primary         <- NUMBER
                | STRING
                | "false"
                | "true"
                | "null"
                | "(" expression ")"
                | compoundVar
                | list
                | funExpr
                | table;

(* STATEMENTS *)
declaration     <- functionDecl
                | varDecl
                | statement;
functionDecl    <- "function" | "\" IDENTIFIER function;
function        <- ("(" parameters ")")? statement;
parameters      <- IDENTIFIER ( "," IDENTIFIER )*;
varDecl         <- "var" IDENTIFIER ( "=" expression ) ? ";";
statement       <- exprStmt
                | forStmt
                | ifStmt
                | returnStmt
                | whileStmt
                | block;
returnStmt      <- "return" expression? ";";
exprStmt        <- expression ";";
forStmt         <- "for" "("( varDecl | exprStmt | ";" )
                            expression ";"
                            expression? ")" statement;
ifStmt          <- "if" "(" expression ")" statement ( "else" statement )?;
whileStmt       <- "while" "(" expression ")" statement;
block           <- "{" declaration* "}";

(* EXPRESSIONS *)
funExpr         <- ("function" | "\") function;
expression      <- assignment;
assignment      <- compoundVar "=" | "+=" | "-=" | "*=" | "/=" | "++" | "--" assignment | logic_or;
logic_or        <- logic_and ( "or" logic_and)*;
logic_and       <- logic_xor ( "xor" logic_xor)*;
logic_xor       <- equality ( "and" equality)*;
equality        <- comparison ( ( "!=" | "==" ) comparison )*;
comparison      <- addition ( ( ">" | ">=" | "<" | "<=" ) addition )*;
addition        <- multiplication ( ( "-" | "+" | "..") multiplication )*;
multiplication  <- unary ( ( "/" | "*" | "++" | "--" ) unary )*;
unary           <- ( "!" | "-" ) unary | call;

(* CALL *)
call                <- primary (callTail | anonymousMethodCall);
callTail            <- "(" arguments* ")" indexedAccess* sequentialCall* anonymousMethodCall?;
anonymousMethodCall <- methodAccess callTail;
sequentialCall      <- ("." "(" arguments* ")");
arguments           <- expression ( "," expression )*;

(* ACCESS *)
compoundVar     <- IDENTIFIER indexedAccess* methodAccess;
indexedAccess   <- ( "[" expression "]" ) | ( "." IDENTIFIER );
methodAccess    <-  ( ":" IDENTIFIER )?;

(* TABLE *)
table           <- [ tableEntry (, tableEntry )* ];
tableEntry      <- ( (-)? primary)
                | ( (-)? IDENTIFIER : primary );