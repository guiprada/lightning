newLines        <- ("\n")*
program         <- newLines declaration* EOF;
primary         <-
                NUMBER |
                STRING |
                "false"|
                "true" |
                "null" |
                "(" expression ")" |
                compoundVar |
                list |
                funExpr |
                table;

(* STATEMENTS *)
declaration     <- functionDecl newLines
                | varDecl newLines
                | statement newLines;
functionDecl    <- "function" | "\" compoundVar function;
function        <- ("(" parameters newLines ")")? statement;
parameters      <- newLines IDENTIFIER newLines ( "," newLines IDENTIFIER )*;
varDecl         <- "var" IDENTIFIER "=" newLines expression newLines ";" newLines;
statement       <- newLines
                (
                    exprStmt |
                    forStmt |
                    ifStmt |
                    returnStmt |
                    whileStmt |
                    block
                ) newLines;
returnStmt      <- "return" expression? ";";
exprStmt        <- expression ";";
forStmt         <- "for" "("( varDecl | exprStmt | ";" )
                            expression ";"
                            expression? ")" statement;
ifStmt          <- "if" "(" expression ")" statement ( "else" statement )?;
whileStmt       <- "while" "(" expression ")" statement;
block           <- "{" newLines declaration* "}";

(* EXPRESSIONS *)
funExpr         <- ("function" | "\") function;
expression      <- assignment;
assignment      <- (
                        compoundVar
                        (
                            "="  newLines |
                            "+=" newLines |
                            "-=" newLines |
                            "*=" newLines |
                            "/=" newLines |
                            "++" newLines |
                            "--" newLines
                        )
                            expression |
                            logic_or;
                    ) newLines
logic_or        <- logic_and ( "or" logic_and)*;
logic_and       <- logic_xor ( "xor" logic_xor)*;
logic_xor       <- equality ( "and" equality)*;
equality        <- comparison ( ( "!=" | "==" ) comparison )*;
comparison      <- addition ( ( ">" | ">=" | "<" | "<=" ) addition )*;
addition        <- multiplication ( ( "-" | "+" | "..") multiplication )*;
multiplication  <- unary ( ( "/" | "*" | "++" | "--" ) unary )*;
unary           <- ( "!" | "-" ) unary | call;

(* CALL *)
call                <- primary ( callTail | anonymousMethodCall );
callTail            <- "(" arguments* ")" indexedAccess* sequentialCall* anonymousMethodCall?;
anonymousMethodCall <- methodAccess callTail;
sequentialCall      <- ("(" arguments* ")" indexedAccess);
arguments           <-  newLines expression newLines ( newLines "," newLines expression )* newLines;

(* ACCESS *)
compoundVar     <- IDENTIFIER indexedAccess* methodAccess;
indexedAccess   <- ( "[" expression "]" ) | ( "." IDENTIFIER );
methodAccess    <-  ( ":" IDENTIFIER )?;

(* TABLE *)
table           <- "[" newLines tableEntry ( newLines "," newLines tableEntry )* newLines "]" newLines;
tableEntry      <- ( (-)? Expression)
                | ( (-)? IDENTIFIER : Expression );