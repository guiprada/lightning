program         	-> declaration* EOF

declaration     	-> funDecl | varDecl | statement
funDecl         	-> "fun" function
function        	-> IDENTIFIER "(" parameters? ")" block
parameters      	-> IDENTIFIER ( "," IDENTIFIER )*
varDecl         	-> "var" IDENTIFIER ( "=" expression ) ? ";"
statement       	-> exprStmt | forStmt | ifStmt | returnStmt | whileStmt | block
returnStmt      	-> "return" expression? ";"
exprStmt        	-> expression ";"
forStmt         	-> "for" "(" ( varDecl | exprStmt | ";" ) expression ";" expression? ")" statement
ifStmt          	-> "if" "(" expression ")" statement ( "else" statement )?
whileStmt       	-> "while" "(" expression ")" statement
block           	-> "{" declaration* "}"

funExpr         	-> ("function" | "\") ("(" parameters ")")? block
expression      	-> assignment
assignment      	-> compoundVar "=" | "+=" | "-=" | "*=" | "/=" | "++" | "--" assignment | logic_or
logic_or        	-> logic_and ( "or" logic_and)*
logic_and       	-> logic_xor ( "xor" logic_xor)*
logic_xor       	-> equality ( "and" equality)*
equality        	-> comparison ( ( "!=" | "==" ) comparison )*
comparison      	-> addition ( ( ">" | ">=" | "<" | "<=" ) addition )*
addition        	-> multiplication ( ( "-" | "+" | "..") multiplication )*
multiplication  	-> unary ( ( "/" | "*" | "++" | "--" ) unary )*
unary           	-> ( "!" | "-" ) unary | chainedCall

chainedCall         -> compoundCall ( "|" arguments )*
compoundCall    	-> (call | methodCall) indexedAccess
call            	-> primary parameters
methodCall      	-> primary : IDENTIFIER parameters
indexedAccess       -> ( ("[" expression "]") | ("." IDENTIFIER) ) )*
parameters       	-> "(" expression? ( "," expression )* ")"
arguments			-> expression ( "," expression )*

table           	-> [ tableEntry (, tableEntry )* ]
tableEntry      	-> primary | IDENTIFIER : primary

compoundVar     	-> IDENTIFIER indexedAccess
primary         	->  (-)? NUMBER | STRING | "false" | "true" | "null" | "(" expression ")" | compoundVar | funExpr | table

chainedCall (unary)
indexedAccess
parameters
methodcall receives primary
remove pipe :)
