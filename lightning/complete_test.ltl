writeln("Starting tests :)")
var error_count = 0
fun assert(value1, value2, msg){
    if(value1 != value2){
        error_count = error_count + 1
        writeln(msg)
    }
}
fun assert_not(value1, value2, msg){
    if(value1 == value2){
        error_count = error_count + 1
        writeln(msg)
    }
}
{
    // Assertions
    assert(1,2,"assert() OK!")
    assert_not(1,1,"assert_not() OK!")

    if(error_count == 2){
        writeln("Reseted error count.\n")
        error_count = 0
    }else{
        writeln("Assertion functions are insane!\n")
    }

    assert(nil, nil, "Failed nil sanity check")
    assert_not(1, nil, "Failed nil sanity check")
    assert(true, true, "Failed true sanity check")
    assert(false, false, "Failed false sanity check")
    assert_not(true, false, "Failed boolean sanity check")
}
{
    // Numbers Comparisson
    var num1 = 1
    var num2 = 2
    assert(num1, 1, "Failed numbers comparisson test 1.")
    assert_not(num1, 2, "Failed numbers comparisson test 2.")
    assert_not(num1, num2, "Failed numbers comparisson test 3.")
    num2 = 1
    assert(num1, num2, "Failed numbers comparisson test 4.")
}
{
    // String Comparisson
    var hello = "hello"
    var world = "world"
    assert("hello", hello, "Failed string concatenation test 1.")
    assert_not(hello, "world", "Failed string concatenation test 2.")
    assert_not(hello, world, "Failed string concatenation test 3.")
}
{
    //String concatenation
    var hello = "hello"
    var world = "world"
    var result = "hello" .. " " .. "world!"
    assert(result, "hello world!", "Failed string concatenation test 1.")
    assert_not(result, "world!", "Failed string concatenation test 2.")
}
{
    // Table test
    var this_list = []
    this_list.a = "a"
    this_list.b = "b"
    var this_list_alias = this_list
    assert(this_list_alias, this_list, "Failed Table test 1.")
    assert_not([a:"a",b:"b"], this_list, "Failed Table test 2.")
    assert_not([a:"b",b:"b"], this_list, "Failed Table test 3.")
    assert_not([], this_list, "Failed Table test 4.")
    assert(count(this_list), 2, "Failed Table test 5")
    assert(tCount(this_list), 2, "Failed Table test 6")
    assert(eCount(this_list), 0, "Failed Table test 7")

    var this_array = this_list
    this_array[0] = 100
    this_array[99] = 0
    assert(this_array[0], 100, "Failed Array test 1.")
    assert(this_array[1], nil, "Failed Array test 2.")
    assert(this_array[99], 0, "Failed Array test 3.")
    assert(count(this_list), 102, "Failed Array test 4")
    assert(eCount(this_array), 100, "Failed Array test 5.")
    assert(tCount(this_list), 2, "Failed Array test 6.")
}
{
    // Testing lexical scoping
    var a = "a"
    {
        var a = "b"
        assert(a, "b", "Failed lexical scoping test 1.")

    }
    assert(a, "a", "Failed lexical scoping test 2.")
}
{
    // Testing a lamba function
    var lambda = fun (a, b, c){
	    return (a+b)/c;
    }
    assert(lambda(1,2,3), 1, "Failed Lambda test 1.")
}
{
    // Testing closures
    fun make_say(value) {
        return fun () {
            return value
        }
    }
    var doughnut = make_say("doughnut")
    var bagel = make_say("bagel")
    assert(doughnut(), "doughnut", "Failed Closure test 1.")
    assert(bagel(), "bagel", "Failed Closure test 2.")

    fun make_changer() {
        var local = "";
        fun closure() {
            local = local .. " extra";
            return local
        }
        return closure;
    }

    var changer = make_changer();
    assert(changer(), " extra", "Failed Closure test 3.")
    assert(changer(), " extra extra", "Failed Closure test 4.")
    assert(changer(), " extra extra extra", "Failed Closure test 5.")

    fun make_accumulator(value){
        var counter = value
        return fun(x){
            counter = counter + x
            return counter;
        }
    }
    var my_acc = make_accumulator(5)
    assert(my_acc(-5), 0, "Failed Closure test 6.")
    assert(my_acc(5), 5, "Failed Closure test 7.")
}
{
    // Testing boolean operations
    //AND
    assert(false, (false and false), "Failed AND test 1.");
    assert(false, (false and true), "Failed AND test 2.");
    assert(false, (true and false), "Failed AND test 3.");
    assert(true, (true and true), "Failed AND test 4.");

    //OR
    assert(false, (false or false), "Failed OR test 1.");
    assert(true, (false or true), "Failed OR test 2.");
    assert(true, (true or false), "Failed OR test 3.");
    assert(true, (true or true), "Failed OR test 4.");

    //XOR
    assert(false, (false xor false), "Failed XOR test 1.");
    assert(true, (false xor true), "Failed XOR test 2.");
    assert(true, (true xor false), "Failed XOR test 3.");
    assert(false, (true xor true), "Failed XOR test 4.");

    //NOT
    assert(false, !true, "Failed NOT test 1.");
    assert(true, !false, "Failed NOT test 2.");

    //NAND
    assert(true, (false nand false), "Failed NAND test 1.");
    assert(true, (false nand true), "Failed NAND test 2.");
    assert(true, (true nand false), "Failed NAND test 3.");
    assert(false, (true nand true), "Failed NAND test 4.");

    //NOR
    assert(true, (false nor false), "Failed NOR test 1.");
    assert(false, (false nor true), "Failed NOR test 2.");
    assert(false, (true nor false), "Failed NOR test 3.");
    assert(false, (true nor true), "Failed NOR test 4.");

    //XNOR
    assert(true, (false xnor false), "Failed XNOR test 1.");
    assert(false, (false xnor true), "Failed XNOR test 2.");
    assert(false, (true xnor false), "Failed XNOR test 3.");
    assert(true, (true xnor true), "Failed XNOR test 4.");
}
{
    // Some arrays, functions and recursion
    var fibs = []
    fun populate_fibs(n){
        var next;
        var num = 1;
        var ant = 0;
        var i = 0;
        while(i <= n){
            fibs[i] = ant;
            next = num + ant;
            ant = num;
            num = next;
            i = i + 1;
        }
    }
    populate_fibs(50)

    assert(fibs[0], 0, "Failed Fibonacci test 1.")
    assert(fibs[1], 1, "Failed Fibonacci test 2.")
    assert(fibs[2], 1, "Failed Fibonacci test 3.")
    assert(fibs[3], 2, "Failed Fibonacci test 4.")
    assert(fibs[30], 832040, "Failed Fibonacci test 5.")
    assert(fibs[40], 102334155, "Failed Fibonacci test 6.")

    fun rec_fib(n){
        if(n < 2){
            return n;
        }
        return rec_fib(n -1) + rec_fib(n -2);
    }

    assert(rec_fib(0), 0, "Failed Fibonacci test 7.")
    assert(rec_fib(1), 1, "Failed Fibonacci test 8.")
    assert(rec_fib(10), fibs[10], "Failed Fibonacci test 9.")
}
{
    // Testing multi dimensional arrays

    var matrix = []
    var lines = 10
    var columns = 3
    for(var i = 0; i < lines; i = i+1){
        matrix[i] = []
        for(var j = 0; j < columns; j = j+1){
            matrix[i][j] = i + j
        }
    }
    assert(matrix[0][0], 0, "Failed multi dimensional array test 1.")
    assert(matrix[9][2], 11, "Failed multi dimensional array test 2.")
}
{
    // Testing an iterator :)
    fun make_iterator(init){
        var counter = init;
        fun closure(i){
            counter = counter + i
            return counter - i
        }
        return closure
    }

    var i = make_iterator(0)
    var j = 0
    var array = []
    while( j < 10){
        j = i(1)
        array[j] = j
    }

    i = make_iterator(0);
    for(var j = 0; j < 10; j = i(1)){
        assert(array[j], j, "Failed iterator test 1.")
    }
}
{
    // Testing method calls

    fun make_player(){
        var player = []
        player.position = [];
        player.position["x"] = 0
        player.position["y"] = 0

        player.move = fun(self, x, y){        
            self.position.x = self.position.x + x;
            self.position.y = self.position.y + y;
            return self.position
        }
        return player
    }

    var p1 = make_player();
    assert(p1:move(1,0).x, 1, "Failed method call test 1.")
    assert(p1:move(0,3).y, 3, "Failed method call test 2.")
}
{
    // Testing "hidden properties"
    fun make_player(){
        var player = []
        var x = 0
        var y = 0

        player.move = fun(_, p_x, p_y){        
            x = x + p_x;
            y = y + p_y;
            return [x:x, y:y]
        }
        return player
    }

    var p1 = make_player()
    var p2 = make_player()

    assert(p1:move(1,1).x, 1, "Failed hidden properties test 1.")
    assert(p1:move(0,2).y, 3, "Failed hidden properties test 2.")    
    assert(p2:move(0,2).y, 2, "Failed hidden properties test 3.")    
}
{
    // Testing "hidden properties" 2
    fun make_player(){
        var player = []
        var x = 0
        var y = 0

        player.move = fun(p_x, p_y){        
            x = x + p_x;
            y = y + p_y;
            return [x:x, y:y]
        }
        return player
    }

    var p1 = make_player()
    var p2 = make_player()

    assert(p1.move(1,1).x, 1, "Failed hidden properties test 1.")
    assert(p1.move(0,2).y, 3, "Failed hidden properties test 2.")    
    assert(p2.move(0,2).y, 2, "Failed hidden properties test 3.")    
}
{
    // Testing compound calls
    fun return_table_with_fun(){
        return fun(){
            var closure = fun (value){
                return value
            }
            return [another_fun: closure]
        }
    }

    assert(return_table_with_fun()().another_fun("viva"), "viva", "Failed compound calls test 1.")

    var func1 = return_table_with_fun()
    assert(func1().another_fun("viva"), "viva", "Failed compound calls test 2.")

    var table = []
    {
        table.inner_table = []
        table.inner_table.x = 1 
        table.inner_table.closure =
        fun(self){            
            return [x:self.x, y:2]
        }
    }

    assert(table.inner_table:closure().x, 1, "Failed compound calls test 3.")
}
{
    // Testing Prelude
    assert(math.pi, 3.1415927, "Failed Prelude test 1.")
}

write("\nFinished tests! ")
if(error_count  == 0)
    writeln(":)")
else
    writeln(":( " .. error_count .. " errors found!")